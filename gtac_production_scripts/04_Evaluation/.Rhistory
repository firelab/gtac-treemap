# eval continuous vars - extract imputed id at actual fia id points
# then calc RMSE
# plot scatterplots w/ 1:1 line and plot RMSE / r^2 on the plot
# save plots
# TO DO:
### SETUP AND RUN
######################################
# Specific inputs
#---------------------------------------------#
# list variables to evaluate
# list variables to evaluate
eval_vars_cat <- c("canopy_cover", "canopy_height", "EVT_GP",
"disturb_code")
eval_vars_cont <- c("GSSTK", "QMD_RMRS", "SDIPCT_RMRS",
"CANOPYPCT", "CARBON_D", "TPA_DEAD", "TPA_LIVE")
eval_vars <- c(eval_vars_cat, eval_vars_cont)
# Standard inputs
#---------------------------------------------#
# Set inputs - from input script
this.path <- this.path::this.path() # Id where THIS script is located
# get path to input script
spl <- stringr::str_split(this.path, "/")[[1]]
input_script_path <- paste(c(spl[c(1:(length(spl) - 1))],
"00_inputs_for_evaluation.R"),
collapse = "/")
source(input_script_path)
# Load data
#----------------------------------------------#
# load imputed raster for comparison
ras <- terra::rast(glue::glue("{assembled_dir}/01_Imputation/{raster_name}.tif"))
names(ras) <- "PLOTID"
# load X_df
X_df <- read.csv(xtable_path) %>%
rename(PLOTID = ID)
# load evt dat
evt_dat <- read.csv(evt_path)
# load coords
coords <- read.csv(coords_path)
# Load raster attribute table
#-------------------------------------------------#
rat <- terra::rast(glue::glue('{rat_path}TreeMap2016.tif'))
rat <- data.frame(cats(rat))
rat %<>%
rename("SDIPCT_RMRS" = SDIPCT_RMR,
"CARBON_DOWN_DEAD" = CARBON_DWN) %>%
mutate(CN = as.numeric(CN)) %>%
select(-Value)
# prep evt data
#------------------------------------------------------#
evt_dat %<>%
select(EVT_GP, EVT_GP_N, RED, GREEN, BLUE) %>%
filter(!is.na(EVT_GP)) %>%
distinct() %>%
group_by(EVT_GP) %>%
slice_head()
# Prep coords data
#----------------------------------------------------------------#
coords %<>%
filter(PLT_CN %in% rat$CN) # limit to CNs with reference values in RAT
# separate out into data frame
coords_df <- coords
# convert coords to spatial
coords <- terra::vect(coords, geom = c("ACTUAL_LON", "ACTUAL_LAT"), crs = "epsg:4269")
# Prep data for plotting
#-----------------------------------------------------------------#
# Data Dictionary for extracts:
# ID: row number of FIA point in original coords
# PLOTID: imputed treemap plot id
# CN_pt : CN of FIA point in original coords
# CN_plot: CN of plot imputed to fia point
# reference table does not have values for PLOTID or CN_plot
# Extract  values to points - imputed plot ID at original FIA point
# -----------------------------------------------#
ras_ex <- terra::extract(ras, coords) %>%
cbind(coords_df$PLT_CN) %>% # bind with CNs to identify plots
rename("CN_pt" = `coords_df$PLT_CN`) %>%
filter(!is.na(PLOTID)) # remove NAs
# join extracts with x table and RAT - join ri_ex$PLOTID to RAT$tm_id
# to get values of the imputed plot
ras_ex %<>% left_join(X_df,
by = c("PLOTID" = "PLOTID")) %>%
left_join(rat, by = c("CN" = "CN", "PLOTID" = "tm_id")) %>%
rename(CN_plot = "CN") %>%
select(c(ID, CN_pt, CN_plot, PLOTID, any_of(c(eval_vars_cat, eval_vars_cont)))) %>%
mutate(dataset = "Imputed")
# prep reference values - from "X_df" joined with RAT
refs <-
ras_ex %>%
select(ID, CN_pt) %>%
left_join(X_df, by = c("CN_pt" = "CN")) %>%
left_join(rat, by = c("CN_pt" = "CN")) %>%
mutate(CN_plot = as.numeric(NA)) %>%
mutate(PLOTID = as.numeric(NA)) %>%
select(c(ID, CN_pt, CN_plot, PLOTID, any_of(c(eval_vars_cat, eval_vars_cont)))) %>%
mutate(dataset = "Ground_FIA")
# join
p_r <- bind_rows(ras_ex, refs) %>%
# pivot longer
pivot_longer(!c(ID, CN_pt, CN_plot, PLOTID, dataset), names_to = "var", values_to = "value") %>%
mutate(var = factor(var),
value = na_if(value, -99.00000),
value = round(value, round_dig)) %>%
arrange(ID)
refs
p_r
ras_ex
i = 4
var_name <- eval_vars_cont[i]
# Violin plots
#------------------#
# p <- p_r %>%
#   filter(var == var_name) %>%
#   ggplot(aes(x = dataset, y = value, fill = dataset))+
#   geom_violin(position = dodge)+
#   geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
#   labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
#   xlab(var_name)
#
# print(p)
#
# Scatterplots
#-------------------#
p_r2 <-
p_r %>%
filter(var == var_name) %>%
select(-c(var, PLOTID, CN_plot)) %>%
ungroup() %>%
pivot_wider(names_from = dataset, values_from = value) %>%
arrange(ID)
# Create linear model
lm <- lm(Imputed ~ Ground_FIA, data = p_r2)
# Method 1 (manual using geom_text())
# Parsing the information saved in the model to create the equation to be added to the scatterplot as an expression # https://r-graphics.org/recipe-scatter-fitlines-text
eqn <- sprintf(
"italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g",
coef(lm)[1],
coef(lm)[2],
summary(lm)$r.squared,  # r-squared
sqrt(mean(lm$residuals^2)) # https://www.statology.org/extract-rmse-from-lm-in-r/
)
eqn
class(eqn)
eval_vars_cont
i = 7
var_name <- eval_vars_cont[i]
p_r2 <-
p_r %>%
filter(var == var_name) %>%
select(-c(var, PLOTID, CN_plot)) %>%
ungroup() %>%
pivot_wider(names_from = dataset, values_from = value) %>%
arrange(ID)
# Create linear model
lm <- lm(Imputed ~ Ground_FIA, data = p_r2)
# Method 1 (manual using geom_text())
# Parsing the information saved in the model to create the equation to be added to the scatterplot as an expression # https://r-graphics.org/recipe-scatter-fitlines-text
eqn <- sprintf(
"italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g",
coef(lm)[1],
coef(lm)[2],
summary(lm)$r.squared,  # r-squared
sqrt(mean(lm$residuals^2)) # https://www.statology.org/extract-rmse-from-lm-in-r/
)
eqn
p2 <- p_r2 %>%
ggplot(aes(x = Ground_FIA, y = Imputed)) +
geom_abline(intercept = 0, color = "red", linewidth = 1, linetype = 2) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x) +
labs() +
theme_bw() +
ggtitle(glue::glue("Imputed vs. Ref for {var_name}"))
p3 <- p2 + annotate(geom="text",x = (0.25*max(p_r2$Ground_FIA, na.rm = TRUE)), y = (0.98*max(p_r2$Imputed, na.rm = TRUE)), label = as.character(eqn), parse = TRUE)
print(p3)
names(p_r2)
p_r3 <- p_r2 %>%
filter(Ground_FIA < 1000)
p_r3
p2 <- p_r3 %>%
ggplot(aes(x = Ground_FIA, y = Imputed)) +
geom_abline(intercept = 0, color = "red", linewidth = 1, linetype = 2) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x) +
labs() +
theme_bw() +
ggtitle(glue::glue("Imputed vs. Ref for {var_name}"))
p3 <- p2 + annotate(geom="text",x = (0.25*max(p_r2$Ground_FIA, na.rm = TRUE)), y = (0.98*max(p_r2$Imputed, na.rm = TRUE)), label = as.character(eqn), parse = TRUE)
print(p3)
p2 <- p_r3 %>%
ggplot(aes(x = Ground_FIA, y = Imputed)) +
geom_abline(intercept = 0, color = "red", linewidth = 1, linetype = 2) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x) +
labs() +
theme_bw() +
ggtitle(glue::glue("Imputed vs. Ref for {var_name}"))
p3 <- p2 + annotate(geom="text",x = (0.25*max(p_r3$Ground_FIA, na.rm = TRUE)), y = (0.98*max(p_r3$Imputed, na.rm = TRUE)), label = as.character(eqn), parse = TRUE)
print(p3)
p_r3 <- p_r2 %>%
filter(Ground_FIA < 1000)
# Create linear model
lm <- lm(Imputed ~ Ground_FIA, data = p_r3)
# Method 1 (manual using geom_text())
# Parsing the information saved in the model to create the equation to be added to the scatterplot as an expression # https://r-graphics.org/recipe-scatter-fitlines-text
eqn <- sprintf(
"italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g",
coef(lm)[1],
coef(lm)[2],
summary(lm)$r.squared,  # r-squared
sqrt(mean(lm$residuals^2)) # https://www.statology.org/extract-rmse-from-lm-in-r/
)
eqn
p2 <- p_r3 %>%
ggplot(aes(x = Ground_FIA, y = Imputed)) +
geom_abline(intercept = 0, color = "red", linewidth = 1, linetype = 2) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x) +
labs() +
theme_bw() +
ggtitle(glue::glue("Imputed vs. Ref for {var_name}"))
p3 <- p2 + annotate(geom="text",x = (0.25*max(p_r3$Ground_FIA, na.rm = TRUE)), y = (0.98*max(p_r3$Imputed, na.rm = TRUE)), label = as.character(eqn), parse = TRUE)
print(p3)
library(flextable)
plot(ras, main = glue::glue("Raw Imputation: Zone {params$zone_num}"))
install.packages("flextable")
library(flextable)
library(knitr)
v = 1
var_in <- eval_vars[v]
print(glue("Variable: {var_in}
"))
##### LOOP OVER EACH VAR
cms <- cms_all[[var_in]]
freq <-
cms$freq %>%
#select fields of interest
dplyr::select(class, ref, pred) %>%
dplyr::mutate(class = factor(class))
# zone number
zone_num <- 16
# Project name
project_name <- "2016_GTAC_Test"
#project_name <- "2016_GTAC_LCMSDist"
# output name - name of raster and CM outputs
output_name <- "2016_Orig_Test_keepinbag_ntree250"
#output_name <- "2016_GTAC_LCMSDist"
# name of raster to validate
raster_name <- glue::glue("2016_Orig_Test_keepinbag_ntree250_tilesz2000_nT36")
#raster_name <- glue::glue("2016_GTAC_LCMSDist_tilesz2000_nT36")
# model to use - supply specific model to pull into imputation, or NA
# if NA, uses default model name and path
model_path <- '//166.2.126.25/TreeMap/03_Outputs/99_Projects/2016_GTAC_Test/01_Raw_model_outputs/z16/model/z16_2016_GTAC_Test_ntree250_yai_treelist_bin.RDS'
#model_path <- NA
# set number of digits to round to
round_dig <- 4
home_dir <- "//166.2.126.25/TreeMap/"
# set location of raster attribute table
rat_path <- glue::glue("{home_dir}01_Data/01_TreeMap2016_RDA/RDS-2021-0074_Data/Data/")
# Path to X table
xtable_path <- glue::glue("{home_dir}03_Outputs/06_Reference_Data/v2016_RMRS/X_table_all_singlecondition.txt")
# set path to landfire vector data
lf_zones_path <- glue::glue("{home_dir}01_Data/02_Landfire/LF_zones/Landfire_zones/refreshGeoAreas_041210.shp")
# path to evt_gp metadata
evt_path <- glue::glue("{home_dir}01_Data/02_Landfire/LF_200/EVT/LF2016_EVT_200_CONUS/CSV_Data/LF16_EVT_200.csv")
# path to coords
coords_path <- glue::glue("{home_dir}01_Data/04_FIA/06_Coordinates/select_TREEMAP2022_2send/select_TREEMAP2022_2send.csv")
