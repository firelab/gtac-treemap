dir <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir/04_FIA/05_FIA_DataMart/CSV/"
# list states - lower 48 states by abbreviation
# states <- c("ID", "UT", "WY")
states <- c("NV", "CO", "MT")
# states <- c("AL", "AR", "AZ", "CA", "CO", "CT",
#             "DE", "FL", "GA", "ID", "IL", "IN",
#             "IA", "KS", "KY", "LA", "ME", "MD",
#             "MA", "MI", "MN", "MS", "MO", "MT",
#             "NE", "NV", "NH", "NJ", "NM", "NY",
#             "NC", "ND", "OH", "OK", "OR", "PA",
#             "RI", "SD", "SC", "TN", "TX", "UT",
#             "VA", "VT", "WV", "WI", "WY", 'WA')
# list tables to download
tables <- c("COND", "PLOT", "TREE")
# sample url https://apps.fs.usda.gov/fia/datamart/Databases/SQLite_FIADB_CA.zip
url_base <- "https://apps.fs.usda.gov/fia/datamart/CSV/"
# create export dir
if (!exists(dir)) {
dir.create(dir)
}
# set longer time to permit download - in seconds
options(timeout = 7200)
# Download FIA data by state
###########################################################
for (j in seq_along(states)){
#j = 1 # for testing
ptm_State <- Sys.time()
state_name <- states[j]
for(k in seq_along(tables)){
#k = 1 # for testing
tbl <- tables[k]
#create url
url <- glue::glue("{url_base}{state_name}_{tbl}.csv")
# create file name
filename <- glue::glue('{dir}{strsplit(url, "/")[[1]][7]}')
print("---------------------------------------------------------------------")
print(paste0("Downloading ", state_name, "-", tbl))
print("---------------------------------------------------------------------")
#what url are you working on?
print(url)
print(filename)
#download files
# download.file(url, filename, mode = "wb")
}
print(Sys.time()-ptm_State)
message(paste0("Done with ", state_name, ". Moving to next..."))
}
print("Done with downloading all FIA data.")
print(Sys.time()-ptm_Start)
source("~/GitHub/gtac-treemap/gtac_production_scripts/02_Reference_Data_Prep/01_download_fia_data.R")
# list states - lower 48 states by abbreviation
# states <- c("ID", "UT", "WY")
# states <- c("NV", "CO", "MT")
states <- c("AL", "AR", "AZ", "CA", "CO", "CT",
"DE", "FL", "GA", "ID", "IL", "IN",
"IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT",
"NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA",
"RI", "SD", "SC", "TN", "TX", "UT",
"VA", "VT", "WV", "WI", "WY", 'WA')
length(states)
# create export dir
if (!exists(dir)) {
dir.create(dir)
}
exists(dir)
# set file destination - will be created if it does not eists
# dir <- glue::glue("{home_dir}TreeMap/01_Data/04_FIA/05_FIA_DataMart/CSV/")
dir <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir/04_FIA/05_FIA_DataMart/CSV/"
exists(dir)
file.exists(dir)
# create export dir
if (!file.exists(dir)) {
dir.create(dir)
}
source("~/GitHub/gtac-treemap/gtac_production_scripts/02_Reference_Data_Prep/01_download_fia_data.R")
home_dir <- "//166.2.126.25/TreeMap/"
# set start year - obtain data for this year and all years after
start_year <- 1999
end_year <- 2016
# set location of prepared reference data
ref_path <- glue::glue('{home_dir}03_Outputs/06_Reference_Data/')
# set location of raster attribute table
rast_path <- glue::glue("{home_dir}01_Data/01_TreeMap2016_RDA/RDS-2021-0074_Data/Data/")
# list states - lower 48 states by abbreviation
states <- c("ID", "UT", "WY",
"NV", "CO", "MT")
# load libraries
library(glue)
library(tidyverse)
library(magrittr)
library(terra)
# Allow for sufficient digits to differentiate plot cn numbers
options("scipen"=100, "digits"=8)
# for testing
i <- 1
state_name <- states[i]
# Load calculated data
#-------------------------------------------#
ref_dat <- read.csv(glue::glue('{ref_path}/01_ByState/{state_name}_{start_year}_{end_year}_attributes.csv'))
# Load calculated data
#-------------------------------------------#
ref_dat <- read.csv(glue::glue('{ref_path}/v2016_GTAC/01_ByState/{state_name}_{start_year}_{end_year}_attributes.csv'))
ref_dat %<>%
select(-c(PLOT, LAT, LON, ELEV, SLOPE, ASPECT, NORTHING, EASTING))
# Load raster attribute table
#-------------------------------------------------#
rat <- terra::rast(glue::glue('{rast_path}TreeMap2016.tif'))
t <- data.frame(cats(rat))
t %<>%
rename("SDIPCT_RMRS" = SDIPCT_RMR,
"CARBON_DOWN_DEAD" = CARBON_DWN) %>%
mutate(CN = as.numeric(CN)) %>%
select(-Value)
names(t)
# Join
# -------------------------------------------------#
table <- left_join(ref_dat, t, by = c("PLT_CN" = "CN"))
#fields we want to evaluate
fields_val <- c(#"FORTYPCD",   "FLDTYPCD",   "STDSZCD",    "FLDSZCD",
#"BALIVE",     "CANOPYPCT",  "STANDHT",    "ALSTK",
#"GSSTK" ,     "QMD_RMRS",   "SDIPCT_RMRS",
"TPA_LIVE",
"TPA_DEAD",   "VOLCFNET_L", "VOLCFNET_D", "VOLBFNET_L",
"DRYBIO_L",   "DRYBIO_D", "CARBON_L",   "CARBON_D")
refs <- t %>%
filter(CN %in% ref_dat$PLT_CN) %>%
select(-c(ForTypName, FldTypName)) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "ref") %>%
mutate(var = factor(var))
preds <- ref_dat %>%
filter(PLT_CN %in% t$CN) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "pred") %>%
mutate(var = factor(var))
p_r <- left_join(preds, refs, by = c("PLT_CN" = "CN", "var"))
p <-
p_r %>%
#filter(var == fields_val[i]) %>%
ggplot() +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(x = ref, y = pred), alpha = 0.1) +
facet_wrap(~var, scales = "free")
print(p)
p_r %>%
split(p_r$var) %>%
map(\(df) lm(pred~ref, data = df)) %>%
map(summary) %>%
map_dbl("r.squared")
# calculate N
p_r %>%
filter(!is.na) %>%
head()
# calculate N
p_r %>%
drop_na() %>%
head()
# calculate N
p_r %>%
drop_na() %>%
summary()
#fields we want to evaluate
fields_val <- c(#"FORTYPCD",   "FLDTYPCD",   "STDSZCD",    "FLDSZCD",
#"BALIVE",     "CANOPYPCT",  "STANDHT",    "ALSTK",
#"GSSTK" ,     "QMD_RMRS",   "SDIPCT_RMRS",
"TPA_LIVE",
"TPA_DEAD",   "VOLCFNET_L", "VOLCFNET_D", "VOLBFNET_L",
"DRYBIO_L",   "DRYBIO_D", "CARBON_L",   "CARBON_D")
refs <- t %>%
filter(CN %in% ref_dat$PLT_CN) %>%
select(-c(ForTypName, FldTypName)) %>%
select(CN, fields_val) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "ref") %>%
mutate(var = factor(var))
refs <- t %>%
filter(CN %in% ref_dat$PLT_CN) %>%
select(-c(ForTypName, FldTypName)) %>%
select(CN, all_of(fields_val)) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "ref") %>%
mutate(var = factor(var))
preds <- ref_dat %>%
filter(PLT_CN %in% t$CN) %>%
select(PLT_CN, fields_val) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "pred") %>%
mutate(var = factor(var))
p_r <- left_join(preds, refs, by = c("PLT_CN" = "CN", "var"))
p <-
p_r %>%
#filter(var == fields_val[i]) %>%
ggplot() +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(x = ref, y = pred), alpha = 0.1) +
facet_wrap(~var, scales = "free")
print(p)
p_r %>%
split(p_r$var) %>%
map(\(df) lm(pred~ref, data = df)) %>%
map(summary) %>%
map_dbl("r.squared")
# calculate N
p_r %>%
drop_na() %>%
summary()
# calculate N
p_r %>%
drop_na() %>%
group_by(var) %>%
summary()
# calculate N
p_r %>%
drop_na() %>%
group_by(var) %>%
summarize(n())
# calculate N of each var
p_r %>%
#drop_na() %>%
group_by(var) %>%
summarize(n())
# calculate N of each var
p_r %>%
drop_na() %>%
group_by(var) %>%
summarize(n())
rm(list = ls())
gc()
home_dir <- "//166.2.126.25/TreeMap/"
# set start and end year - obtain data for this year range
start_year <- 1999
end_year <- 2016
# set location of input csvs
fia_path <- glue::glue('{home_dir}01_Data/04_FIA/05_FIA_DataMart/CSV/')
# set location to export ref data to
ref_path <- glue::glue('{home_dir}03_Outputs/06_Reference_Data/')
# list states - lower 48 states by abbreviation
states <- c("ID", "UT", "WY",
"NV", "CO", "MT")
# load libraries
library(glue)
library(tidyverse)
library(magrittr)
# Allow for sufficient digits to differentiate plot cn numbers
options("scipen"=100, "digits"=8)
# Create directory
if(!file.exists(glue::glue('{ref_path}/01_ByState/'))) {
dir.create(glue::glue('{ref_path}/01_ByState/'), recursive = TRUE)
}
for(i in 1:length(states)) {
# for testing
#i <- 3
state_name <- states[i]
print(glue("working on {state_name}"))
# load input tables
plot <- read.csv(glue('{fia_path}{state_name}_PLOT.csv'))
cond <- read.csv(glue('{fia_path}{state_name}_COND.csv'))
tree <- read.csv(glue('{fia_path}{state_name}_TREE.csv'))
# get fields from plot table
plot_in <- plot %>%
dplyr::select(CN, PLOT, STATECD, UNITCD, COUNTYCD, LAT, LON, ELEV, INVYR) %>%
dplyr::arrange(PLOT) %>%
dplyr::rename("PLT_CN" = CN)
# get fields from condition table
cond_in <- cond %>%
dplyr::select(CN, PLT_CN, CONDID, PLOT, STATECD, UNITCD, COUNTYCD, # id fields
ASPECT, SLOPE, DSTRBCD1, DSTRBYR1, # initial fields
LIVE_CANOPY_CVR_PCT,# canopy cover
FORTYPCD, FLDTYPCD, STDSZCD, FLDSZCD, BALIVE, ALSTK, GSSTK,
CARBON_DOWN_DEAD, QMD_RMRS, SDIPCT_RMRS, # variables that will be derived after imputation
COND_STATUS_CD) %>% #variables that will be queried to create end variables
dplyr::rename("COND_CN" = CN) %>%
arrange(PLOT)
# Join plot and cond data
t <- inner_join(plot_in, cond_in, by = c("PLT_CN", "PLOT", "STATECD", "UNITCD", "COUNTYCD")) %>%
# filter to years of interest
filter(INVYR >= start_year & INVYR <= end_year) %>%
# filter to forested plots
filter(COND_STATUS_CD == 1) %>%
# filter to single-condition plots
filter(CONDID == 1) %>%
# calculate aspect as northing and easting
dplyr::mutate(radians = (pi/180)*ASPECT,
NORTHING = round(cos(radians), 6),
EASTING = round(sin(radians), 6)) %>%
dplyr::select(-radians) %>%
dplyr::arrange(PLOT, STATECD, UNITCD, COUNTYCD)
# apply any other filters
# join with coordinates
# check for duplicates
t %>%
group_by(PLT_CN) %>%
filter(n()> 1)
# save
#write.csv(t, glue('{ref_path}{state_name}_FIAextract_allVars.csv'))
# BUILD TREE TABLE
# ------------------------------------------------------------#
# build tree table
tree_in <- tree %>%
# filter to years of interest
filter(INVYR > start_year) %>%
dplyr::select(CN, PLT_CN, PLOT, STATECD, UNITCD, COUNTYCD,
#DRYBIO_TOP, DRYBIO_SAPLING, DRYBIO_WDLD_SPP, # not in tree table for some reason?
DRYBIO_STEM, DRYBIO_BRANCH, DRYBIO_FOLIAGE,
DRYBIO_AG, DRYBIO_BG,
DRYBIO_BOLE,  DRYBIO_STUMP,
TPA_UNADJ, STATUSCD, DIA, STANDING_DEAD_CD, VOLBFNET, VOLCFNET,
TREECLCD) %>%
# replace nas with 0
replace(is.na(.), 0)
# join with raw vars table
treelist <-
tree_in %>%
right_join(t, by = c("PLT_CN", "PLOT", "STATECD", "UNITCD", "COUNTYCD" )) %>%
group_by(PLT_CN)
# Calculate vars from FIA
# -------------------------------------------#
# CARBON_D
# Carbon, standing dead (tons per acre). Calculated via the following FIA query:
#   Query; Sum (DRYBIO_BOLE, DRYBIO_TOP, DRYBIO_STUMP, DRYBIO_SAPLING, DRYBIO_WDLD_SPP) / 2 /2000*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=2) AND ((TREE.DIA)>=5) AND ((TREE.STANDING_DEAD_CD)=1))
CARBON_D <-
treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 2 &
DIA >= 5 &
STANDING_DEAD_CD == 1) %>%
dplyr::reframe(CARBON_D = sum(DRYBIO_BOLE, DRYBIO_STUMP, DRYBIO_BRANCH )/2/2000 * TPA_UNADJ) %>%
distinct()
# CARBON_L
# Carbon, live above ground (tons per acre). Calculated via the following FIA query:
#   Query; Sum (DRYBIO_BOLE, DRYBIO_TOP, DRYBIO_STUMP, DRYBIO_SAPLING, DRYBIO_WDLD_SPP) / 2 /2000*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=1))
CARBON_L <-
treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 1 ) %>%
dplyr::reframe(CARBON_L = sum(DRYBIO_BOLE, DRYBIO_STUMP, DRYBIO_BRANCH  )/2/2000*TPA_UNADJ)%>%
distinct()
#DRYBIO_D
# Dry standing dead tree biomass, above ground (tons per acre). Calculated via the following FIA query:
#   Query; Sum (DRYBIO_BOLE, DRYBIO_TOP, DRYBIO_STUMP, DRYBIO_SAPLING, DRYBIO_WDLD_SPP) /2000*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=2) AND ((TREE.DIA)>=5) AND ((TREE.STANDING_DEAD_CD)=1))
DRYBIO_D <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 2 &
DIA >= 5 &
STANDING_DEAD_CD == 1) %>%
dplyr::reframe(DRYBIO_D = sum(DRYBIO_BOLE, DRYBIO_STUMP, DRYBIO_BRANCH )/2000*TPA_UNADJ)%>%
distinct()
# DRYBIO_L
# Dry live tree biomass, above ground (tons per acre). Calculated via the following FIA query:
#   Query; Sum (DRYBIO_BOLE, DRYBIO_TOP, DRYBIO_STUMP, DRYBIO_SAPLING, DRYBIO_WDLD_SPP) /2000*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=1))
DRYBIO_L <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 1 ) %>%
dplyr::reframe(DRYBIO_L = sum(DRYBIO_BOLE, DRYBIO_STUMP, DRYBIO_BRANCH )/2000*TPA_UNADJ)%>%
distinct()
#TPA_DEAD
#Number of standing dead trees per acre (DIA greater than 5"). Calculated via the following FIA query:
#Query; Sum TREE.TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=2) AND ((TREE.DIA)>=5) AND ((TREE.STANDING_DEAD_CD)=1))
TPA_DEAD <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 2 &
DIA >= 5 &
STANDING_DEAD_CD == 1) %>%
dplyr::reframe(TPA_DEAD = sum(TPA_UNADJ)) %>%
distinct()
# TPA_LIVE: Live Trees Per Acre
# Number of live trees per acre. Calculated via the following FIA query:
#   Query; Sum TREE.TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=1) AND ((TREE.DIA)>=1))
TPA_LIVE <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 1 &
DIA >= 1 ) %>%
dplyr::reframe(TPA_LIVE = sum(TPA_UNADJ)) %>%
distinct()
#     VOLBFNET_L: Volume, Live (sawlog-board-ft/acre)
#     Volume, live, sawlog board feet per acre (log rule: Int'l ¼ inch). Calculated via the following FIA query:
# Query; Sum VOLBFNET * TPA_UNADJ WHERE (((TREE.TREECLCD)=2) AND ((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=1))
VOLBFNET_L <- treelist %>%
dplyr::filter(TREECLCD == 2 &
COND_STATUS_CD == 1 &
STATUSCD == 1) %>%
dplyr::reframe(VOLBFNET_L = sum(VOLBFNET*TPA_UNADJ)) %>%
distinct()
# VOLCFNET_D: Volume, Standing Dead (ft3/acre)
# Volume, standing dead, cubic feet per acre. Calculated via the following FIA query:
#   Query; Sum VOLCFNET*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=2) AND ((TREE.DIA)>=5) AND ((TREE.STANDING_DEAD_CD)=1))
VOLCFNET_D <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 2 &
DIA >= 5 &
STANDING_DEAD_CD == 1) %>%
dplyr::reframe(VOLCFNET_D = sum(VOLCFNET*TPA_UNADJ)) %>%
distinct()
# VOLCFNET_L: Volume, Live (ft3/acre)
# Volume, live, cubic feet per acre. Calculated via the following FIA query:
#   Query; Sum VOLCFNET*TPA_UNADJ WHERE (((COND.COND_STATUS_CD)=1) AND ((TREE.STATUSCD)=1))
VOLCFNET_L <- treelist %>%
dplyr::filter(COND_STATUS_CD == 1 &
STATUSCD == 1 ) %>%
dplyr::reframe(VOLCFNET_L = sum(VOLCFNET*TPA_UNADJ)) %>%
distinct()
# Join all vars together
#--------------------------------------------#
d_list <- list(CARBON_D, CARBON_L, DRYBIO_D, DRYBIO_L, TPA_DEAD, TPA_LIVE, VOLBFNET_L, VOLCFNET_D, VOLCFNET_L)
attributes_out <- purrr::reduce(d_list,
full_join,
by = "PLT_CN") %>%
dplyr::full_join(t, by = "PLT_CN") %>%
# Select variables of interest
dplyr::select(PLT_CN, PLOT, LAT, LON, ELEV, SLOPE, ASPECT, NORTHING, EASTING,
# attributes
ALSTK, BALIVE, CARBON_D, CARBON_L, CARBON_DOWN_DEAD,
DSTRBCD1, DSTRBYR1, DRYBIO_D, DRYBIO_L,FORTYPCD, FLDTYPCD, FLDSZCD,
GSSTK, LIVE_CANOPY_CVR_PCT,QMD_RMRS, STDSZCD,  SDIPCT_RMRS, TPA_DEAD,
TPA_LIVE, VOLBFNET_L, VOLCFNET_D, VOLCFNET_L)
dupes <- attributes_out %>%
group_by(PLT_CN) %>%
filter(n() > 1)
# check for duplicates
print("duplicate CNs - first 6")
print(
attributes_out %>%
group_by(PLT_CN) %>%
filter(n() > 1) %>%
head()
)
# save
write.csv(attributes_out, glue('{ref_path}/01_ByState/{state_name}_{start_year}_{end_year}_attributes.csv'), row.names = FALSE )
}
home_dir <- "//166.2.126.25/TreeMap/"
# set start year - obtain data for this year and all years after
start_year <- 1999
end_year <- 2016
# set location of prepared reference data
ref_path <- glue::glue('{home_dir}03_Outputs/06_Reference_Data/')
# set location of raster attribute table
rast_path <- glue::glue("{home_dir}01_Data/01_TreeMap2016_RDA/RDS-2021-0074_Data/Data/")
# list states - lower 48 states by abbreviation
states <- c("ID", "UT", "WY",
"NV", "CO", "MT")
# load libraries
library(glue)
library(tidyverse)
library(magrittr)
library(terra)
# Allow for sufficient digits to differentiate plot cn numbers
options("scipen"=100, "digits"=8)
# for testing
i <- 1
state_name <- states[i]
# Load calculated data
#-------------------------------------------#
ref_dat <- read.csv(glue::glue('{ref_path}/v2016_GTAC/01_ByState/{state_name}_{start_year}_{end_year}_attributes.csv'))
ref_dat %<>%
select(-c(PLOT, LAT, LON, ELEV, SLOPE, ASPECT, NORTHING, EASTING))
# Load raster attribute table
#-------------------------------------------------#
rat <- terra::rast(glue::glue('{rast_path}TreeMap2016.tif'))
t <- data.frame(cats(rat))
t %<>%
rename("SDIPCT_RMRS" = SDIPCT_RMR,
"CARBON_DOWN_DEAD" = CARBON_DWN) %>%
mutate(CN = as.numeric(CN)) %>%
select(-Value)
names(t)
# Join
# -------------------------------------------------#
table <- left_join(ref_dat, t, by = c("PLT_CN" = "CN"))
#fields we want to evaluate
fields_val <- c(#"FORTYPCD",   "FLDTYPCD",   "STDSZCD",    "FLDSZCD",
#"BALIVE",     "CANOPYPCT",  "STANDHT",    "ALSTK",
#"GSSTK" ,     "QMD_RMRS",   "SDIPCT_RMRS",
"TPA_LIVE",
"TPA_DEAD",   "VOLCFNET_L", "VOLCFNET_D", "VOLBFNET_L",
"DRYBIO_L",   "DRYBIO_D", "CARBON_L",   "CARBON_D")
refs <- t %>%
filter(CN %in% ref_dat$PLT_CN) %>%
select(-c(ForTypName, FldTypName)) %>%
select(CN, all_of(fields_val)) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "ref") %>%
mutate(var = factor(var))
preds <- ref_dat %>%
filter(PLT_CN %in% t$CN) %>%
select(PLT_CN, fields_val) %>%
pivot_longer(any_of(fields_val), names_to = "var", values_to = "pred") %>%
mutate(var = factor(var))
p_r <- left_join(preds, refs, by = c("PLT_CN" = "CN", "var"))
p <-
p_r %>%
#filter(var == fields_val[i]) %>%
ggplot() +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(x = ref, y = pred), alpha = 0.1) +
facet_wrap(~var, scales = "free")
print(p)
labs(x = "RAT values", y = "GTAC values")
p <-
p_r %>%
#filter(var == fields_val[i]) %>%
ggplot() +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(x = ref, y = pred), alpha = 0.1) +
facet_wrap(~var, scales = "free")+
labs(x = "RAT values", y = "GTAC values")
print(p)
p_r %>%
split(p_r$var) %>%
map(\(df) lm(pred~ref, data = df)) %>%
map(summary) %>%
map_dbl("r.squared")
# calculate N of each var
p_r %>%
drop_na() %>%
group_by(var) %>%
summarize(n())
