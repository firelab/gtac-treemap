landfire_crs <- terra::crs(glue::glue('{home_dir}/01_Data/02_Landfire/landfire_crs.prj'))
# libraries
#--------------------------------------------------------#
# install dev version
#remotes::install_github("corybrunson/ggalluvial@main", build_vignettes = TRUE)
library(ggalluvial)
# load libraries
library(terra)
library(tidyverse)
library(magrittr)
library(ggplot2)
# Other options
# --------------------------------#
# Allow for sufficient digits to differentiate plot cn numbers
options("scipen"=100, "digits"=8)
#########################################################
# Run
#########################################################
# Load data
#----------------------------------------------#
# load raster 1 for comparison
r1 <- terra::rast(r1_path)
names(r1) <- "PLOTID"
# load raster 2 for comparison
r2 <- terra::rast(r2_path)
names(r2) <- "PLOTID"
# load shp / pts to extract to
pts <- terra::vect(pts_path)
# load x.df
X.df <- read.csv(xtable_path) %>%
rename(PLOTID = ID)
# load evt dat
evt_dat <- read.csv(evt_path)
# load coords
coords <- read.csv(coords_path)
i = 1
eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position="dodge") +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
coords_path
# path to coords
coords_path <- glue::glue("{home_dir}01_Data/04_FIA/06_Coordinates/select_TREEMAP2022_2send/select_TREEMAP2022_2send.csv")
# libraries
#--------------------------------------------------------#
# install dev version
#remotes::install_github("corybrunson/ggalluvial@main", build_vignettes = TRUE)
library(ggalluvial)
# load libraries
library(terra)
library(tidyverse)
library(magrittr)
library(ggplot2)
# Other options
# --------------------------------#
# Allow for sufficient digits to differentiate plot cn numbers
options("scipen"=100, "digits"=8)
#########################################################
# Run
#########################################################
# Load data
#----------------------------------------------#
# load raster 1 for comparison
r1 <- terra::rast(r1_path)
names(r1) <- "PLOTID"
# load raster 2 for comparison
r2 <- terra::rast(r2_path)
names(r2) <- "PLOTID"
# load shp / pts to extract to
pts <- terra::vect(pts_path)
# load x.df
X.df <- read.csv(xtable_path) %>%
rename(PLOTID = ID)
# load evt dat
evt_dat <- read.csv(evt_path)
# load coords
coords <- read.csv(coords_path)
# Load raster attribute table
#-------------------------------------------------#
rat <- terra::rast(glue::glue('{rast_path}TreeMap2016.tif'))
rat <- data.frame(cats(rat))
rat %<>%
rename("SDIPCT_RMRS" = SDIPCT_RMR,
"CARBON_DOWN_DEAD" = CARBON_DWN) %>%
mutate(CN = as.numeric(CN)) %>%
select(-Value)
#names(rat)
# prep evt data
#------------------------------------------------------#
evt_dat %<>%
select(EVT_GP, EVT_GP_N, RED, GREEN, BLUE) %>%
filter(!is.na(EVT_GP)) %>%
distinct() %>%
group_by(EVT_GP) %>%
slice_head()
# Prep pts
#----------------------------------#
# project pts
pts %<>% terra::project(r1)
# convert to data frame
pts_df <- data.frame(pts)
# Prep coords data
#----------------------------------------------------------------#
coords %<>%
filter(PLT_CN %in% rat$CN) # limit to CNs with reference values in RAT
# separate out into data frame
coords_df <- coords
# convert coords to spatial
coords <- terra::vect(coords, geom = c("ACTUAL_LON", "ACTUAL_LAT"), crs = "epsg:4269")
# Prep data to plot
#----------------------------------------------------------#
# Data Dictionary for extracts / Outputs:
# ID: row number of FIA point in original coords
# PLOTID: imputed treemap plot id
# CN_pt : CN of FIA point in original coords
# CN_plot: CN of plot imputed to fia point
# extract  values to points - imputed plot ID at original FIA point
# -----------------------------------------------#
r1_ex <- terra::extract(r1, coords) %>%
cbind(coords_df$PLT_CN) %>% # bind with CNs to identify plots
rename("CN_pt" = `coords_df$PLT_CN`) %>%
filter(!is.na(PLOTID)) # remove NAs
r2_ex <- terra::extract(r2, coords) %>%
cbind(coords_df$PLT_CN) %>% # bind with CNs to identify plots
rename("CN_pt" = `coords_df$PLT_CN`) %>%
filter(!is.na(PLOTID))  # remove NAs
# join extracts with x table and RAT - join ri_ex$PLOTID to RAT$tm_id
# to get values of the imputed plot
r1_ex %<>% left_join(X.df,
by = c("PLOTID" = "PLOTID")) %>%
left_join(rat, by = c("CN" = "CN", "PLOTID" = "tm_id")) %>%
rename(CN_plot = "CN") %>%
select(c(ID, CN_pt, CN_plot, PLOTID, any_of(c(eval_vars_cat, eval_vars_cont)))) %>%
mutate(dataset = r1_name)
r2_ex %<>% left_join(X.df,
by = c("PLOTID" = "PLOTID")) %>%
left_join(rat, by = c("CN" = "CN", "PLOTID" = "tm_id")) %>%
rename(CN_plot = "CN") %>%
select(c(ID, CN_pt, CN_plot, PLOTID, any_of(c(eval_vars_cat, eval_vars_cont)))) %>%
mutate(dataset = r2_name)
# prep reference values - from "X.df / reference table"
refs <-
r1_ex %>%
select(ID, CN_pt) %>%
left_join(X.df, by = c("CN_pt" = "CN")) %>%
left_join(rat, by = c("CN_pt" = "CN")) %>%
mutate(CN_plot = as.numeric(NA)) %>%
mutate(PLOTID = as.numeric(NA)) %>%
select(c(ID, CN_pt, CN_plot, PLOTID, any_of(c(eval_vars_cat, eval_vars_cont)))) %>%
mutate(dataset = "Reference")
# join
p_r <- bind_rows(r1_ex, r2_ex, refs) %>%
# pivot longer
pivot_longer(!c(ID, CN_pt, CN_plot, PLOTID, dataset, disturb_code), names_to = "var", values_to = "value") %>%
mutate(var = factor(var),
value = na_if(value, -99.00000), # update NA values from RAT
disturb_code = factor(disturb_code,
labels = c("None", "Fire", "Slow Loss"))) %>%
group_by(disturb_code)
i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(valueFact) %>%
summarise(count = n()))
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
categoryTotals
sum(categoryTotals$count)
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(valueFact, dataset, disturb_code) %>%
summarise(count = n())
p_Norm <-
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(valueFact, dataset, disturb_code) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
countsByCategory
sum(countsByCategory$count)
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df
temp_df$normalized_count <- temp_df$count.x/mergeTable$count.y
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
temp_df
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(x = "canopy_cover")
print(p_Norm)
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(x = "canopy_cover")
print(p_Norm)
glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png')
export_fig_path
export_fig_path <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir"
glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'
)
for(i in 1:(length(eval_vars_cat)-1)) {
# for testing
#i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) + # https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.png'),
plot = p,
width = 7,
height = 4.5)
# Normalized plot
# Calculate totals for categories
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(x = "canopy_cover")
print(p_Norm)
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'),
plot = p,
width = 7,
height = 4.5)
}
for(i in 1:(length(eval_vars_cat)-1)) {
# for testing
#i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) + # https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.png'),
plot = p,
width = 7,
height = 4.5)
# Normalized plot
# Calculate totals for categories
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(x = "canopy_cover")
print(p_Norm)
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'),
plot = p_Norm,
width = 7,
height = 4.5)
}
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model (normalized)')) +
xlab(var_name)
print(p_Norm)
for(i in 1:(length(eval_vars_cat)-1)) {
# for testing
#i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) + # https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.png'),
plot = p,
width = 7,
height = 4.5)
# Normalized plot
# Calculate totals for categories
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model (normalized)')) +
xlab(var_name)
print(p_Norm)
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'),
plot = p_Norm,
width = 7,
height = 4.5)
}
dodge <- position_dodge(width = 0.6)
i = 1
var_name <- eval_vars_cont[i]
p <- p_r %>%
filter(var == var_name) %>%
ggplot(aes(x = disturb_code, y = value, fill = dataset))+
geom_violin(position = dodge)+
geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# prelim data prep
p_r_evt <- p_r %>%
ungroup() %>%
filter(var == "EVT_GP") %>%
left_join(evt_dat, by = c("value" = "EVT_GP")) %>%
rename("EVT_GP" = value) %>%
mutate(EVT_GP_N_short = str_sub(EVT_GP_N, 1, 15))
# get names of evts present
evt_names <- p_r_evt %>%
select(c(EVT_GP, EVT_GP_N, EVT_GP_N_short)) %>%
distinct() %>%
mutate(EVT_GP = factor(EVT_GP)) %>%
arrange(EVT_GP) %>%
mutate(EVT_GP_N = factor(EVT_GP_N, levels = EVT_GP_N),
EVT_GP_N_short = factor(EVT_GP_N_short, levels = EVT_GP_N_short))
# continue data prep
p_r_evt %<>%
mutate(EVT_GP = factor(EVT_GP),
EVT_GP_N = factor(EVT_GP_N, levels = levels(evt_names$EVT_GP_N)),
dataset = factor(dataset),
PLOTID = as.integer(PLOTID))
p_r_evt %>%
ggplot(aes(x=EVT_GP, fill=dataset)) +
geom_bar(position="dodge") +
scale_x_discrete(labels = evt_names$EVT_GP_N_short) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in EVT_GP by disturbance code, by model')) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p_r_evt
p_r_evt %>%
ggplot(aes(x=EVT_GP, fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) +
scale_x_discrete(labels = evt_names$EVT_GP_N_short) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in EVT_GP by disturbance code, by model')) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p_r_evt
p <- p_r %>%
filter(var == var_name) %>%
ggplot(aes(x = disturb_code, y = value, fill = dataset))+
geom_violin(position= position_dodge2(preserve = "single"))+
geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
p <- p_r %>%
filter(var == var_name) %>%
ggplot(aes(x = disturb_code, y = value, fill = dataset))+
geom_violin(position = dodge)+
geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
export_fig_path
# path to save output figures
export_fig_path <- glue::glue("{home_dir}03_Outputs/99_Projects/2016_GTAC_LCMSDist/03_Evaluation/z16/04_Model_Comparison/")
export_fig_path
export_fig_path <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir"
for(i in 1:(length(eval_vars_cat)-1)) {
# for testing
#i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) + # https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.png'),
plot = p,
width = 7,
height = 4.5)
# Normalized plot
# Calculate totals for categories
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model (normalized)')) +
xlab(var_name)
print(p_Norm)
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'),
plot = p_Norm,
width = 7,
height = 4.5)
}
# path to save output figures
export_fig_path <- glue::glue("{home_dir}03_Outputs/99_Projects/2016_GTAC_LCMSDist/03_Evaluation/z16/04_Model_Comparison/")
for(i in 1:(length(eval_vars_cat)-1)) {
# for testing
#i = 2
var_name <- eval_vars_cat[i]
p <-  p_r %>%
filter(var == var_name) %>%
ggplot(aes(x=as.factor(value),  fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) + # https://stackoverflow.com/questions/38101512/the-same-width-of-the-bars-in-geom-barposition-dodge
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
xlab(var_name)
print(p)
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.png'),
plot = p,
width = 7,
height = 4.5)
# Normalized plot
# Calculate totals for categories
categoryTotals <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value) %>%
summarise(count = n()))
countsByCategory <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
temp_df <- merge(countsByCategory, categoryTotals, by = c("value"), all.x = TRUE)
temp_df$normalized_count <- temp_df$count.x/temp_df$count.y
p_Norm <-  ggplot(data = temp_df, aes(x=as.factor(value), y=normalized_count, fill = dataset)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in {var_name} by disturbance code, by model (normalized)')) +
xlab(var_name)
print(p_Norm)
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_normalized.png'),
plot = p_Norm,
width = 7,
height = 4.5)
}
p_r_evt %>%
ggplot(aes(x=EVT_GP, fill=dataset)) +
geom_bar(position= position_dodge2(preserve = "single")) +
scale_x_discrete(labels = evt_names$EVT_GP_N_short) +
facet_wrap(~disturb_code) +
labs(title = glue::glue('Variation in EVT_GP by disturbance code, by model')) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# save
ggsave(glue::glue('{export_fig_path}/{r1_name}_vs_{r2_name}_vs_ref_EVT_GP.png'),
plot = last_plot(),
width = 7,
height = 4.5)
categoryTotals
countsByCategory
# Calculate counts by categories
countsBy_dataset_DistCode <- data.frame(p_r %>%
filter(var == var_name) %>%
group_by(value, dataset, disturb_code) %>%
summarise(count = n()))
