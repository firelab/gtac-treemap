#                             label.theme = element_text(size =12))) +
guides(color = "none") + # un-comment to remove plot legend
scale_x_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts x-axis from 0 and labels 0
scale_y_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts y-axis from 0 and labels 0
labs(x = "Reference (Ground_FIA)",
y = "Imputed") +
theme_bw() +
# ggtitle(glue::glue("FIA buffer plot (40 m radius) evaluation: {var_name}")) +
ggtitle(glue::glue("{var_name}")) +
theme(axis.title = element_text(size = 16),
plot.title = element_text(size = 18)) +
annotate(geom="rect",
xmin = ((low_lim + up_lim)/2) - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = ((low_lim + up_lim)/2) + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "beige") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LF),
parse = TRUE,
color = "purple",
size = text_size) +
annotate(geom="rect",
xmin = (low_lim + up_lim)/2 - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = (low_lim + up_lim)/2 + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "cadetblue1") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LCMS),
parse = TRUE,
color = "darkgreen",
size = text_size)
text_size <- 6 # 5 for indvidual plots 3 for all plots in grid
percent_x_textPos <- 0.50 # 0.4 for individual plots
percent_y_textPos1 <- 0.96 # 0.96 for individual plots
percent_y_textPos2 <- 0.89 # 0.96 for individual plots
textBoxFill_ratioX <- 0.20
textBoxFill_ratioY <- 0.03
p_r2 %>%
# filter(LFOrig < 200) %>%
# filter(LCMSDist < 200) %>%
ggplot(aes(x = Reference)) +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
# facet_wrap(~disturb_code) +
scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
# guides(color = guide_legend(title = "Target data",
#                             keylength = 2,
#                             keyheight = 2,
#                             title.theme = element_text(size = 14),
#                             label.theme = element_text(size =12))) +
guides(color = "none") + # un-comment to remove plot legend
scale_x_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts x-axis from 0 and labels 0
scale_y_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts y-axis from 0 and labels 0
labs(x = "Reference (Ground_FIA)",
y = "Imputed") +
theme_bw() +
# ggtitle(glue::glue("FIA buffer plot (40 m radius) evaluation: {var_name}")) +
ggtitle(glue::glue("{var_name}")) +
theme(axis.title = element_text(size = 16),
plot.title = element_text(size = 18)) +
annotate(geom="rect",
xmin = ((low_lim + up_lim)/2) - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = ((low_lim + up_lim)/2) + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "beige") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LF),
parse = TRUE,
color = "purple",
size = text_size) +
annotate(geom="rect",
xmin = (low_lim + up_lim)/2 - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = (low_lim + up_lim)/2 + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "cadetblue1") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LCMS),
parse = TRUE,
color = "darkgreen",
size = text_size)
textBoxFill_ratioX <- 0.23
textBoxFill_ratioY <- 0.03
p_r2 %>%
# filter(LFOrig < 200) %>%
# filter(LCMSDist < 200) %>%
ggplot(aes(x = Reference)) +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
# facet_wrap(~disturb_code) +
scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
# guides(color = guide_legend(title = "Target data",
#                             keylength = 2,
#                             keyheight = 2,
#                             title.theme = element_text(size = 14),
#                             label.theme = element_text(size =12))) +
guides(color = "none") + # un-comment to remove plot legend
scale_x_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts x-axis from 0 and labels 0
scale_y_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts y-axis from 0 and labels 0
labs(x = "Reference (Ground_FIA)",
y = "Imputed") +
theme_bw() +
# ggtitle(glue::glue("FIA buffer plot (40 m radius) evaluation: {var_name}")) +
ggtitle(glue::glue("{var_name}")) +
theme(axis.title = element_text(size = 16),
plot.title = element_text(size = 18)) +
annotate(geom="rect",
xmin = ((low_lim + up_lim)/2) - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = ((low_lim + up_lim)/2) + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "beige") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LF),
parse = TRUE,
color = "purple",
size = text_size) +
annotate(geom="rect",
xmin = (low_lim + up_lim)/2 - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = (low_lim + up_lim)/2 + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "cadetblue1") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LCMS),
parse = TRUE,
color = "darkgreen",
size = text_size)
ggObjList <- list()
text_size <- 6 # 5 for indvidual plots 3 for all plots in grid
percent_x_textPos <- 0.50 # 0.4 for individual plots
percent_y_textPos1 <- 0.96 # 0.96 for individual plots
percent_y_textPos2 <- 0.89 # 0.96 for individual plots
textBoxFill_ratioX <- 0.23
textBoxFill_ratioY <- 0.03
for(i in 1:(length(eval_vars_cont))) {
# for testing
# i = 8
var_name <- eval_vars_cont[i]
# p <- p_r %>%
#   filter(var == var_name) %>%
#   ggplot(aes(x = disturb_code, y = value, fill = dataset))+
#   geom_violin(position = dodge)+
#   geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
#   labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
#   xlab(var_name)
#
# print(p)
low_lim <- quantile((p_r %>% filter(var == var_name))$value, probs = 0.20, na.rm = TRUE)[[1]] # 20th quantile/percentile
up_lim <- quantile((p_r %>% filter(var == var_name))$value, probs = 0.80, na.rm = TRUE)[[1]] # 80th quantile/percentile
# plot as scatterplot
# p_r2 <-
#   p_r %>%
#   filter(var == var_name) %>%
#   select(-c(var, PLOTID, CN_plot)) %>%
#   ungroup() %>%
#   pivot_wider(names_from = dataset, values_from = value) %>%
#   arrange(ID)
# FIA Buffer plots
# plot as scatterplot
p_r2 <-
p_r %>%
# filter(MaxOfINVYR >= filterYear) %>%
filter(var == var_name) %>%
filter(value >= low_lim & value <= up_lim) %>%
select(-c(var, PLOTID, CN_plot)) %>%
ungroup() %>%
pivot_wider(names_from = dataset, values_from = value, values_fn = ~ mean(.x, na.rm = TRUE)) %>% # aggregate to mean value
arrange(ID) %>%
drop_na()
# Create linear model
lm_LF <- lm(LFOrig ~ Reference, data = p_r2)
lm_LCMS <- lm(LCMSDist ~ Reference, data = p_r2)
# Method 1 (manual using geom_text())
# Parsing the information saved in the model to create the equation to be added to the scatterplot as an expression # https://r-graphics.org/recipe-scatter-fitlines-text
# eqn_LF <- sprintf(
#   "italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
#   coef(lm_LF)[1],
#   coef(lm_LF)[2],
#   summary(lm_LF)$r.squared,  # r-squared
#   sqrt(mean(lm_LF$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
#   mean(abs(lm_LF$residuals)) # mean absolute error (MAE)
# )
#
# eqn_LCMS <- sprintf(
#   "italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
#   coef(lm_LCMS)[1],
#   coef(lm_LCMS)[2],
#   summary(lm_LCMS)$r.squared,  # r-squared
#   sqrt(mean(lm_LCMS$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
#   mean(abs(lm_LCMS$residuals)) # mean absolute error (MAE)
# )
# When plotting grid (only add R-sq, RMSE, MAE)
eqn_LF <- sprintf(
"italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
summary(lm_LF)$r.squared,  # r-squared
sqrt(mean(lm_LF$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
mean(abs(lm_LF$residuals)) # mean absolute error (MAE)
)
eqn_LCMS <- sprintf(
"italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
summary(lm_LCMS)$r.squared,  # r-squared
sqrt(mean(lm_LCMS$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
mean(abs(lm_LCMS$residuals)) # mean absolute error (MAE)
)
# Manually set legend colors
legendColors <- c("LFOrig" = "purple",
"LCMSDist" = "darkgreen")
p2 <- p_r2 %>%
# filter(LFOrig < 200) %>%
# filter(LCMSDist < 200) %>%
ggplot(aes(x = Reference)) +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
# facet_wrap(~disturb_code) +
scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
# guides(color = guide_legend(title = "Target data",
#                             keylength = 2,
#                             keyheight = 2,
#                             title.theme = element_text(size = 14),
#                             label.theme = element_text(size =12))) +
guides(color = "none") + # un-comment to remove plot legend
scale_x_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts x-axis from 0 and labels 0
scale_y_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts y-axis from 0 and labels 0
labs(x = "Reference (Ground_FIA)",
y = "Imputed") +
theme_bw() +
# ggtitle(glue::glue("FIA buffer plot (40 m radius) evaluation: {var_name}")) +
ggtitle(glue::glue("{var_name}")) +
theme(axis.title = element_text(size = 16),
plot.title = element_text(size = 18)) +
annotate(geom="rect",
xmin = ((low_lim + up_lim)/2) - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = ((low_lim + up_lim)/2) + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "beige") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LF),
parse = TRUE,
color = "purple",
size = text_size) +
annotate(geom="rect",
xmin = (low_lim + up_lim)/2 - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = (low_lim + up_lim)/2 + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "cadetblue1") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LCMS),
parse = TRUE,
color = "darkgreen",
size = text_size)
# print(p2)
# save
# export_fig_path <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir" # testing
# ggsave(glue::glue('{export_fig_path}/FIABufferPlotEval/Scatterplots_continuous_vars/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_FIABufferPlotEval.png'),
#        plot = p2,
#        width = 16,
#        height = 9)
#
# interactive plot
# library(plotly)
# library(htmlwidgets)
# p_plotly <- p_r2 %>%
#   # filter(LFOrig < 200) %>%
#   # filter(LCMSDist < 200) %>%
#   ggplot(aes(x = Reference)) +
#   geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
#   geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
#   geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
#   geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
#   geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
#   # facet_wrap(~disturb_code) +
#   scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
#   # guides(color = "none") + # comment out to remove plot legend
#   guides(color = guide_legend(title = "Target data",
#                               keylength = 2,
#                               keyheight = 2,
#                               title.theme = element_text(size = 14),
#                               label.theme = element_text(size =12))) +
#   # scale_x_continuous(expand = c(0, 0), limits = c(0, NA)) + # starts x-axis from 0 and labels 0
#   # scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) + # starts y-axis from 0 and labels 0
#   labs(x = "Reference (Ground_FIA)",
#        y = "Imputed") +
#   theme_bw() +
#   theme(axis.title = element_text(size = 12)) +
#
#   ggtitle(var_name)
#
# plotlyObj <- plotly::ggplotly(p_plotly)
#
# htmlwidgets::saveWidget(plotlyObj, glue::glue('{export_fig_path}/LFOrig_vs_LCMSDist_vs_Ref_InteractivePlots/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.html'))
ggObjList[[i]] <- p2
}
library(gridExtra)
p3 <- gridExtra::grid.arrange(grobs = ggObjList, nrow = 3, ncol = 4)
#
#
ggsave(glue::glue("{export_fig_path}/FIABufferPlotEval/Scatterplots_continuous_vars/{r1_name}_vs_{r2_name}_vs_ref_ALL_VARS_1.png"),
plot = p3,
width = 24,
height = 13.5)
ggObjList <- list()
text_size <- 6 # 5 for indvidual plots 3 for all plots in grid
percent_x_textPos <- 0.50 # 0.4 for individual plots
percent_y_textPos1 <- 0.96 # 0.96 for individual plots
percent_y_textPos2 <- 0.89 # 0.96 for individual plots
textBoxFill_ratioX <- 0.40
textBoxFill_ratioY <- 0.03
for(i in 1:(length(eval_vars_cont))) {
# for testing
# i = 8
var_name <- eval_vars_cont[i]
# p <- p_r %>%
#   filter(var == var_name) %>%
#   ggplot(aes(x = disturb_code, y = value, fill = dataset))+
#   geom_violin(position = dodge)+
#   geom_boxplot(width=.1, outlier.colour=NA, position = dodge) +
#   labs(title = glue::glue('Variation in {var_name} by disturbance code, by model')) +
#   xlab(var_name)
#
# print(p)
low_lim <- quantile((p_r %>% filter(var == var_name))$value, probs = 0.20, na.rm = TRUE)[[1]] # 20th quantile/percentile
up_lim <- quantile((p_r %>% filter(var == var_name))$value, probs = 0.80, na.rm = TRUE)[[1]] # 80th quantile/percentile
# plot as scatterplot
# p_r2 <-
#   p_r %>%
#   filter(var == var_name) %>%
#   select(-c(var, PLOTID, CN_plot)) %>%
#   ungroup() %>%
#   pivot_wider(names_from = dataset, values_from = value) %>%
#   arrange(ID)
# FIA Buffer plots
# plot as scatterplot
p_r2 <-
p_r %>%
# filter(MaxOfINVYR >= filterYear) %>%
filter(var == var_name) %>%
filter(value >= low_lim & value <= up_lim) %>%
select(-c(var, PLOTID, CN_plot)) %>%
ungroup() %>%
pivot_wider(names_from = dataset, values_from = value, values_fn = ~ mean(.x, na.rm = TRUE)) %>% # aggregate to mean value
arrange(ID) %>%
drop_na()
# Create linear model
lm_LF <- lm(LFOrig ~ Reference, data = p_r2)
lm_LCMS <- lm(LCMSDist ~ Reference, data = p_r2)
# Method 1 (manual using geom_text())
# Parsing the information saved in the model to create the equation to be added to the scatterplot as an expression # https://r-graphics.org/recipe-scatter-fitlines-text
# eqn_LF <- sprintf(
#   "italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
#   coef(lm_LF)[1],
#   coef(lm_LF)[2],
#   summary(lm_LF)$r.squared,  # r-squared
#   sqrt(mean(lm_LF$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
#   mean(abs(lm_LF$residuals)) # mean absolute error (MAE)
# )
#
# eqn_LCMS <- sprintf(
#   "italic(y) == %.3g + %.3g * italic(x) * ',' * ~~ italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
#   coef(lm_LCMS)[1],
#   coef(lm_LCMS)[2],
#   summary(lm_LCMS)$r.squared,  # r-squared
#   sqrt(mean(lm_LCMS$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
#   mean(abs(lm_LCMS$residuals)) # mean absolute error (MAE)
# )
# When plotting grid (only add R-sq, RMSE, MAE)
eqn_LF <- sprintf(
"italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
summary(lm_LF)$r.squared,  # r-squared
sqrt(mean(lm_LF$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
mean(abs(lm_LF$residuals)) # mean absolute error (MAE)
)
eqn_LCMS <- sprintf(
"italic(r)^2 ~ '=' ~ %.2g * ',' ~~ RMSE ~ '=' ~  %.3g * ',' ~~ MAE ~ '=' ~  %.3g",
summary(lm_LCMS)$r.squared,  # r-squared
sqrt(mean(lm_LCMS$residuals^2)), # https://www.statology.org/extract-rmse-from-lm-in-r/
mean(abs(lm_LCMS$residuals)) # mean absolute error (MAE)
)
# Manually set legend colors
legendColors <- c("LFOrig" = "purple",
"LCMSDist" = "darkgreen")
p2 <- p_r2 %>%
# filter(LFOrig < 200) %>%
# filter(LCMSDist < 200) %>%
ggplot(aes(x = Reference)) +
geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
# facet_wrap(~disturb_code) +
scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
# guides(color = guide_legend(title = "Target data",
#                             keylength = 2,
#                             keyheight = 2,
#                             title.theme = element_text(size = 14),
#                             label.theme = element_text(size =12))) +
guides(color = "none") + # un-comment to remove plot legend
scale_x_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts x-axis from 0 and labels 0
scale_y_continuous(expand = c(0, 0), limits = c(low_lim, up_lim)) + # starts y-axis from 0 and labels 0
labs(x = "Reference (Ground_FIA)",
y = "Imputed") +
theme_bw() +
# ggtitle(glue::glue("FIA buffer plot (40 m radius) evaluation: {var_name}")) +
ggtitle(glue::glue("{var_name}")) +
theme(axis.title = element_text(size = 16),
plot.title = element_text(size = 18)) +
annotate(geom="rect",
xmin = ((low_lim + up_lim)/2) - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = ((low_lim + up_lim)/2) + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "beige") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos1*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LF),
parse = TRUE,
color = "purple",
size = text_size) +
annotate(geom="rect",
xmin = (low_lim + up_lim)/2 - ((up_lim - low_lim)*textBoxFill_ratioX),
xmax = (low_lim + up_lim)/2 + ((up_lim - low_lim)*textBoxFill_ratioX),
ymin = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) - ((up_lim - low_lim)*textBoxFill_ratioY),
ymax = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)) + ((up_lim - low_lim)*textBoxFill_ratioY),
fill = "cadetblue1") +
annotate(geom="text",
x = (low_lim + up_lim)/2,
y = (percent_y_textPos2*max(p_r2$LCMSDist, na.rm = TRUE)),
label = as.character(eqn_LCMS),
parse = TRUE,
color = "darkgreen",
size = text_size)
# print(p2)
# save
# export_fig_path <- "C:/Users/abhinavshrestha/OneDrive - USDA/Documents/02_TreeMap/temp_dir" # testing
# ggsave(glue::glue('{export_fig_path}/FIABufferPlotEval/Scatterplots_continuous_vars/{r1_name}_vs_{r2_name}_vs_ref_{var_name}_FIABufferPlotEval.png'),
#        plot = p2,
#        width = 16,
#        height = 9)
#
# interactive plot
# library(plotly)
# library(htmlwidgets)
# p_plotly <- p_r2 %>%
#   # filter(LFOrig < 200) %>%
#   # filter(LCMSDist < 200) %>%
#   ggplot(aes(x = Reference)) +
#   geom_abline(intercept = 0, color = "red", linewidth = 0.5 ) +
#   geom_point(aes(y = LFOrig, color = "LFOrig"), alpha = 0.25) +
#   geom_point(aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.25) +
#   geom_smooth(method = "lm", formula = y~x,  aes(y = LFOrig, color = "LFOrig"), alpha = 0.15) +
#   geom_smooth(method = "lm", formula = y~x, aes(y = LCMSDist, color = "LCMSDist"), alpha = 0.15) +
#   # facet_wrap(~disturb_code) +
#   scale_color_manual(values = legendColors, breaks = c("LFOrig", "LCMSDist")) +
#   # guides(color = "none") + # comment out to remove plot legend
#   guides(color = guide_legend(title = "Target data",
#                               keylength = 2,
#                               keyheight = 2,
#                               title.theme = element_text(size = 14),
#                               label.theme = element_text(size =12))) +
#   # scale_x_continuous(expand = c(0, 0), limits = c(0, NA)) + # starts x-axis from 0 and labels 0
#   # scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) + # starts y-axis from 0 and labels 0
#   labs(x = "Reference (Ground_FIA)",
#        y = "Imputed") +
#   theme_bw() +
#   theme(axis.title = element_text(size = 12)) +
#
#   ggtitle(var_name)
#
# plotlyObj <- plotly::ggplotly(p_plotly)
#
# htmlwidgets::saveWidget(plotlyObj, glue::glue('{export_fig_path}/LFOrig_vs_LCMSDist_vs_Ref_InteractivePlots/{r1_name}_vs_{r2_name}_vs_ref_{var_name}.html'))
ggObjList[[i]] <- p2
}
library(gridExtra)
p3 <- gridExtra::grid.arrange(grobs = ggObjList, nrow = 3, ncol = 4)
#
ggsave(glue::glue("{export_fig_path}/FIABufferPlotEval/Scatterplots_continuous_vars/{r1_name}_vs_{r2_name}_vs_ref_ALL_VARS_1.png"),
plot = p3,
width = 24,
height = 13.5)
